#!/usr/bin/env swipl
% cat1 â€” Axiomatic line-numbering file display tool

:- use_module(library(dcg/basics)).  % For basic DCG utilities
:- use_module(library(pure_input)). % For phrase_from_file/2

% Define a DCG that parses a sequence of lowercase words, each ending with a newline.
lines([L|Ls]) --> line(L), lines(Ls).
lines([])     --> [].

line(Line) --> string_without("\n", Cs), "\n", { atom_codes(Line, Cs) }.

% Entry point: read lines from file and print them
parse(File, Lines) :-
    phrase_from_file(lines(Lines), File).


output_stream(Stream, Lines) -->
    output_lines(Stream, Lines, 1).

output_lines(_, [], _) --> [].
output_lines(Stream, [Line|Rest], N) -->
    {
        format(Stream, '~d ~s~n', [N, Line]),
        N1 is N + 1
    },
    output_lines(Stream, Rest, N1).

%------------------------------------------------------------------------------
% Entry point with shebang compatibility and argument parsing
%------------------------------------------------------------------------------
:- initialization(main, main).

main([Filename]) :-
    parse(Filename, Lines),
    current_output(Stream),
    phrase(output_stream(Stream, Lines), _).

